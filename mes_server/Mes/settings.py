"""
Django settings for Mes lean.

Generated by 'django-admin startproject' using Django 2.rtyhyguhkij.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os
import sys
import datetime

# Build paths inside the lean like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, BASE_DIR)
sys.path.insert(0, os.path.join(BASE_DIR, 'apps'))
sys.path.insert(0, os.path.join(BASE_DIR, 'extra_apps'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!

SECRET_KEY = '$hn-4gih-+xwf40)3*$!0w1zt)1e2fxes3-2qpvu3lfwu&_6(n'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']
# Application definition
AUTH_USER_MODEL = "user.UserInforModel"

INSTALLED_APPS = [
    'django.contrib.admin',  # 站点管理系统
    'django.contrib.auth',  # Django用户管理模块
    'django.contrib.contenttypes',
    'django.contrib.sessions',  # session框架
    'django.contrib.messages',  # Message框架
    'django.contrib.staticfiles',  # 静态文件管理框架
    'apps.user',  # 用户管理模块
    'apps.process',  # 工艺管理模块
    'apps.quality',  # 品质管理模块
    'apps.plan',  # 计划管理模块
    'apps.warehouse',  # 仓库管理模块
    'apps.production',  # 生产管理模块
    'apps.equipment',  # 设备管理模块
    'apps.lean',  # 精益管理模块
    'rest_framework',  # DRF模块
    'django_filters',  # 数据过滤模块
    'corsheaders', #跨域解决模块

]



MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'apps.commonFunction.RecordEventMiddleWare',
]

ROOT_URLCONF = 'Mes.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',

        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Mes.wsgi.application'
#数据库管理表
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'mes_user',
        'USER': 'root',
        'PASSWORD': 'admin123',
        'HOST': 'localhost',
        'PORT': '3306',
        'OPTIONS': { 'init_command': 'SET default_storage_engine=INNODB;' }
    },
    'process': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'mes_process',
        'USER': 'root',
        'PASSWORD': 'admin123',
        'HOST': 'localhost',
        'PORT': '3306',
        'OPTIONS': { 'init_command': 'SET default_storage_engine=INNODB;' }
    },
    'quality': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'mes_quality',
        'USER': 'root',
        'PASSWORD': 'admin123',
        'HOST': 'localhost',
        'PORT': '3306',
        'OPTIONS': {'init_command': 'SET default_storage_engine=INNODB;'}

    },
    'plan': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'mes_plan',
        'USER': 'root',
        'PASSWORD': 'admin123',
        'HOST': 'localhost',
        'PORT': '3306',
        'OPTIONS': {'init_command': 'SET default_storage_engine=INNODB;'}

    },
    'warehouse': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'mes_warehouse',
        'USER': 'root',
        'PASSWORD': 'admin123',
        'HOST': 'localhost',
        'PORT': '3306',
        'OPTIONS': {'init_command': 'SET default_storage_engine=INNODB;'}

    },
    'production': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'mes_production',
        'USER': 'root',
        'PASSWORD': 'admin123',
        'HOST': 'localhost',
        'PORT': '3306',
        'OPTIONS': {'init_command': 'SET default_storage_engine=INNODB;'}

    },
    'equipment': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'mes_equipment',
        'USER': 'root',
        'PASSWORD': 'admin123',
        'HOST': 'localhost',
        'PORT': '3306',
        'OPTIONS': {'init_command': 'SET default_storage_engine=INNODB;'}

    },
    'lean': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'mes_lean',
        'USER': 'root',
        'PASSWORD': 'admin123',
        'HOST': 'localhost',
        'PORT': '3306',
        'OPTIONS': {'init_command': 'SET default_storage_engine=INNODB;'}

    },
}


DATABASE_ROUTERS = ['Mes.database_apps_router.DatabaseAppsRouter']

# 应用与数据库映射表
DATABASE_APPS_MAPPING = {
    'process': 'process',
    'quality': 'quality',
    'plan': 'plan',
    'warehouse': 'warehouse',
    'production': 'production',
    'equipment': 'equipment',
    'lean': 'lean',
}

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'zh-hans'  # 语言

TIME_ZONE = 'Asia/Shanghai'  # 时区

USE_I18N = True

USE_L10N = True

USE_TZ = False

AUTHENTICATION_BACKENDS = (
    'guardian.backends.ObjectPermissionBackend',  # 对象级权限
    'django.contrib.auth.backends.ModelBackend',  # 对象级权限
    'apps.user.views.basicinfor_view.CustomBackend', #通用权限验证类
)

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
         'rest_framework.authentication.BasicAuthentication',
    ),
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'
    ],
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.AutoSchema'
}



JWT_AUTH = {
    'JWT_ENCODE_HANDLER':
        'rest_framework_jwt.utils.jwt_encode_handler',

    'JWT_DECODE_HANDLER':
        'rest_framework_jwt.utils.jwt_decode_handler',

    'JWT_PAYLOAD_HANDLER':
        'rest_framework_jwt.utils.jwt_payload_handler',

    'JWT_PAYLOAD_GET_USER_ID_HANDLER':
        'rest_framework_jwt.utils.jwt_get_user_id_from_payload_handler',

    'JWT_RESPONSE_PAYLOAD_HANDLER':
        'rest_framework_jwt.utils.jwt_response_payload_handler',

    # 'JWT_SECRET_KEY': settings.SECRET_KEY,
    'JWT_GET_USER_SECRET_KEY': None,
    'JWT_PUBLIC_KEY': None,
    'JWT_PRIVATE_KEY': None,
    'JWT_ALGORITHM': 'HS256',
    'JWT_VERIFY': True,
    'JWT_VERIFY_EXPIRATION': True,
    'JWT_LEEWAY': 0,
    'JWT_EXPIRATION_DELTA': datetime.timedelta(seconds=300000),
    'JWT_AUDIENCE': None,
    'JWT_ISSUER': None,

    'JWT_ALLOW_REFRESH': False,
    'JWT_REFRESH_EXPIRATION_DELTA': datetime.timedelta(days=7),

    'JWT_AUTH_HEADER_PREFIX': 'JWT',
    'JWT_AUTH_COOKIE': None,

}
# Static files (CSS, JavaScript, Images)静态文件目录配置
# https://docs.djangoproject.com/en/2.1/howto/static-files/


MEDIA_URL= '/media/'
#MEDIA_ROOT = os.path.join(BASE_DIR, "media")      #指定应用程序根目录下的目录
MEDIA_ROOT ="/mnt/sdc/data"                   #指定为自定义的目录
#手机号码正则表达式
REGEX_MOBILE = "^rtyhyguhkij[358]\d{9}$|^147\d{8}$|^176\d{8}$"


#跨域增加忽略
CORS_ALLOW_CREDENTIALS = True
CORS_ORIGIN_ALLOW_ALL = True
CORS_ORIGIN_WHITELIST = (

)

CORS_ALLOW_METHODS = (
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
    'VIEW',
)

CORS_ALLOW_HEADERS = (
    'XMLHttpRequest',
    'X_FILENAME',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'Pragma',
)
# guardan  配置
GUARDIAN_RAISE_403=True
ANONYMOUS_USER_ID=-1

# 静态文件搜集目录设置
STATIC_URL = "/static/"

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static")
]
STATIC_ROOT = os.path.join(BASE_DIR, "/static/")

# 是否可以创建者跟授权者相同
SAME_USER=True
